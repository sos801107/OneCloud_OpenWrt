#========================================================================================================================
# https://github.com/ophub/amlogic-s9xxx-openwrt
# Description: Use Releases file to packaging
# Cron: min (0 - 59) / hour (0 - 23) / day of month (1 - 31) / month (1 - 12) / day of week (0 - 6)(Sunday - Saturday)
#========================================================================================================================
name: 一站式精简onecloud直刷包【istoreos】

on:
  #自动编译：当Auto-Clean运行完成后
  workflow_run:
    workflows: ["Auto-Clean"]
    types:
      - completed
  #手动编译
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  REPO_URL: https://github.com/istoreos/istoreos.git
  REPO_BRANCH: istoreos-24.10
  ##REPO_URL: https://github.com/immortalwrt/immortalwrt
  ##REPO_BRANCH: openwrt-24.10  
  FEEDS_CONF: feeds.conf.default
  #DIY_P1_SH: sh/quick.sh
  DIY_P1_SH: sh/new_immortalwrt.sh
  DIY_P2_SH: sh/immortalwrt.sh
  DIY_P3_SH: sh/remove.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  OWRT_IP: 192.168.1.110
  OWRT_NAME: OneCloud
  OWRT_FILES: onecloud/files
  TZ: Asia/Shanghai

jobs:
  build_brun_firmware:
    name: ${{ matrix.brun_type }} 直刷包编译
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        brun_type:
          - amlogic6.12
          - amlogic6.6
          - meson6.6
        
    steps:
    - name: 清理服务器空间(Ubuntu)
      uses: rmoyulong/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        
    - name: 检查项目
      uses: actions/checkout@main
 
    - name: 检查分配的服务器性能
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT 

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
          sudo -E apt-get -qq update --fix-missing
          sudo -E apt-get -qq full-upgrade
          sudo -E apt-get -qq install -y $(curl -fsSL https://raw.githubusercontent.com/rmoyulong/AX6-Actions_Lede/master/Ubuntu-2410.txt)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -Th

    - name: 初始化变量
      run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)
          #export OWRT_TYPE="cortex-a53"
          
          echo "OWRT_URL=$REPO_URL" >> $GITHUB_ENV
          echo "OWRT_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_NAME=$OWRT_NAME" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
          echo "DIY_P1_SH=$DIY_P1_SH" >> $GITHUB_ENV
          echo "DIY_P2_SH=$DIY_P2_SH" >> $GITHUB_ENV
          echo "DIY_P3_SH=$DIY_P3_SH" >> $GITHUB_ENV          
          echo "OWRT_FILES=$OWRT_FILES" >> $GITHUB_ENV
          
          if [[ "${{ matrix.brun_type }}" == "meson6.6" ]]; then
            OWRT_CFG="Config/quicker.config"
            echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV
          elif [[ "${{ matrix.brun_type }}" == "amlogic6.12" ]]; then
            OWRT_CFG="Config/quicker-amlogic.config"
            echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV
          elif [[ "${{ matrix.brun_type }}" == "amlogic6.6" ]]; then
            OWRT_CFG="Config/quicker-amlogic.config"
            echo "OWRT_CFG=$OWRT_CFG" >> $GITHUB_ENV
          else
             echo "没有选择编译任何类型"
             exit 1
          fi
        
        
    - name: 克隆源仓库
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: 检查脚本
      run: |
        cd ./sh

        dos2unix ./*.sh
        chmod +x ./*.sh          
        
    - name: 设置订阅源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
        cd openwrt
        
        if [[ "${{ matrix.brun_type }}" == "meson6.6" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/meson target/linux
          chmod -Rf 755 target/linux/meson
          ls -l target/linux/meson
          echo "meson6.6"
        elif [[ "${{ matrix.brun_type }}" == "amlogic6.12" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/amlogic target/linux
          chmod -Rf 755 target/linux/amlogic
          ls -l target/linux/amlogic
          echo "amlogic6.12"
        elif [[ "${{ matrix.brun_type }}" == "amlogic6.6" ]]; then
          mv $GITHUB_WORKSPACE/lede6.6/target/linux/amlogic target/linux
          chmod -Rf 755 target/linux/amlogic
          ls -l target/linux/amlogic
          echo "amlogic6.6"
        fi
        
        $GITHUB_WORKSPACE/$DIY_P1_SH
        #echo 'src-git kiddin9 https://github.com/kiddin9/openwrt-packages' >> feeds.conf.default
        echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
 
    - name: 启动缓存[第二次起生效]
      uses: rmoyulong/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        mixkey: ${{ matrix.brun_type }}/tree/${{ env.OWRT_BRANCH }}?device=${{ env.OWRT_CFG }} 
        
    - name: 安装订阅源
      run: |
        cd openwrt
        echo $(date +"%Y%m%d%H") > version
      
        ./scripts/feeds update -a
        ./scripts/feeds install -a       
        
    - name:  加载自定义配置
      working-directory: ./openwrt
      run: |          
          #curl -L -o package/base-files/files/etc/banner https://raw.githubusercontent.com/rmoyulong/AX6-Actions_Lede/master/ax6/cats_banner
          $GITHUB_WORKSPACE/$DIY_P2_SH
         
          #删除冲突的插件 
          #rm -rf feeds/kenzok8/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd-alt,miniupnpd-iptables,wireless-regdb}
          $GITHUB_WORKSPACE/sh/remove.sh
               
    - name: 自定义IMAGS格式 - meson8b cortex-a5+vfpv4
      working-directory: ./openwrt
      run: | 
          rm -rf ./tmp* ./.config*
          [ -e $GITHUB_WORKSPACE/${{ env.OWRT_CFG }}  ] && mv $GITHUB_WORKSPACE/${{ env.OWRT_CFG }}  .config
          
          #如果files文件夹不存在，创建文件夹
          if [ ! -d "./files" ]; then
            mkdir ./files
          fi          
          cp -rf $GITHUB_WORKSPACE/$OWRT_FILES/* ./files
          
          ls -l files
          if [ ! -f files/etc/rc.local ]; then
            echo "rc.local文件不存在！"
          else
            cat files/etc/rc.local
          fi 
          
          #web控制台去掉443监听补丁
          if [[ "${{ inputs.OWRT_TYPE }}" == *"OneCloud-docker"* ]]; then
            cp -rf $GITHUB_WORKSPACE/ax6/uhttpd ./files/etc/config
          else
            #去掉多余的dhcp文件，让首次启动有dhcp服务
            rm -rf ./files/etc/config/dhcp
          fi
          #openclash 32
          $GITHUB_WORKSPACE/sh/openclash32.sh
        
    - name: 下载编译环境
      working-directory: ./openwrt
      run: |      
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 
        
    - name: 制作直刷包
      run: |
          if [[ "${{ matrix.brun_type }}" == "amlogic6.12" ]]; then
            $GITHUB_WORKSPACE/sh/convert3.sh
          else
            $GITHUB_WORKSPACE/sh/convert2.sh
          fi
          
    - name: 整理固件
      id: organize
      run: |
        cd openwrt
        mkdir outfile
        cp -rf bin/targets/*/*/*.tar ./outfile
        cp -rf bin/targets/*/*/*.xz ./outfile
        cp -rf .config ./outfile/config.txt
        rm -rf bin/targets/*/*/packages
        
        cd outfile
        
        if [[ $REPO_URL == *"immortalwrt"* ]]; then
          gzip *.tar
        fi
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
        
        #信息
        export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        export OWRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 5-)
        echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
        echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV

    - name: 上传直刷固件
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: OpenWrt_${{ env.OWRT_SOURCE }}_${{ env.OWRT_DATE }}
        body: |
          自用玩客云一站式直刷固件[${{ matrix.brun_type }}]！
          请使用双USB公头线刷机！
          ==========🧊 基本信息 🧊==========
          💻 固件源码： ${{env.OWRT_SOURCE}}
          💝 源码分支： ${{ env.OWRT_BRANCH }}
          🔑 默认密码： password
          🌐 默认地址： ${{env.OWRT_IP}}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 清理Releases
      uses: rmoyulong/delete-older-releases@master
      with:
        keep_latest: 10
        delete_tags: true

    - name: 清理Workflows
      uses: rmoyulong/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 1



